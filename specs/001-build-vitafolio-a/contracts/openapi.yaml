openapi: 3.0.3
info:
  title: Vitafolio Life Management API
  description: API for managing collections and items in the Vitafolio life management system
  version: 1.0.0
  contact:
    n            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

  /collections/{id}/schema:
    get:
      summary: Get collection schema
      description: Retrieve the metadata schema for a specific collection
      tags:
        - Schema
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Schema retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/MetadataSchema'
                      version:
                        type: integer
                        minimum: 1
                      lastModified:
                        type: string
                        format: date-time
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update collection schema
      description: Replace the entire metadata schema for a collection
      tags:
        - Schema
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataSchema'
      responses:
        '200':
          description: Schema updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/MetadataSchema'
                      version:
                        type: integer
                      lastModified:
                        type: string
                        format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /collections/{id}/schema/fields:
    post:
      summary: Add schema field
      description: Add a new field to the collection's metadata schema
      tags:
        - Schema
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fieldName
                - fieldDefinition
              properties:
                fieldName:
                  type: string
                  pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
                fieldDefinition:
                  $ref: '#/components/schemas/MetadataFieldDefinition'
      responses:
        '200':
          description: Field added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/MetadataSchema'
                      addedField:
                        type: string
                      version:
                        type: integer

  /collections/{id}/schema/fields/{fieldName}:
    put:
      summary: Update schema field
      description: Update a specific field in the collection's metadata schema
      tags:
        - Schema
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataFieldDefinition'
      responses:
        '200':
          description: Field updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/MetadataSchema'
                      updatedField:
                        type: string
                      version:
                        type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Remove schema field
      description: Remove a field from the collection's metadata schema
      tags:
        - Schema
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Field removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/MetadataSchema'
                      removedField:
                        type: string
                      version:
                        type: integer
        '400':
          description: Cannot remove field due to existing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Field is required and cannot be removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /collections/{collectionId}/items:itafolio API Team
    email: api@vitafolio.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.vitafolio.com/v1
    description: Production server

security:
  - bearerAuth: []

paths:
  /collections:
    get:
      summary: List user's collections
      description: Retrieve all collections owned by the authenticated user
      tags:
        - Collections
      responses:
        '200':
          description: Successfully retrieved collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      collections:
                        type: array
                        items:
                          $ref: '#/components/schemas/Collection'
                  timestamp:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create new collection
      description: Create a new collection with metadata schema
      tags:
        - Collections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      collection:
                        $ref: '#/components/schemas/Collection'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /collections/{id}:
    get:
      summary: Get collection by ID
      description: Retrieve a specific collection owned by the authenticated user
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      collection:
                        $ref: '#/components/schemas/Collection'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update collection
      description: Update an existing collection's name and description (use schema endpoints for schema changes)
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      collection:
                        $ref: '#/components/schemas/Collection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete collection
      description: Delete a collection (only if it contains no items)
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Collection deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Collection contains items and cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /collections/{collectionId}/items:
    get:
      summary: List items in collection
      description: Retrieve all items in a specific collection with optional filtering
      tags:
        - Items
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search term for item names
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of items to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Item'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'

    post:
      summary: Create item in collection
      description: Create a new item in the specified collection
      tags:
        - Items
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/Item'

  /items/{id}:
    get:
      summary: Get item by ID
      description: Retrieve a specific item owned by the authenticated user
      tags:
        - Items
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Item retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/Item'
                      collection:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          name:
                            type: string

    put:
      summary: Update item
      description: Update an existing item's details and metadata
      tags:
        - Items
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/Item'

    delete:
      summary: Delete item
      description: Delete an item from its collection
      tags:
        - Items
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /search/items:
    get:
      summary: Search items across collections
      description: Search for items across all user's collections
      tags:
        - Search
      parameters:
        - name: q
          in: query
          description: Search query string
          required: true
          schema:
            type: string
        - name: collections
          in: query
          description: Comma-separated list of collection IDs to search in
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Item'
                            - type: object
                              properties:
                                collectionName:
                                  type: string
                                relevanceScore:
                                  type: number
                                  format: float
                                  minimum: 0
                                  maximum: 1
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'

  /notifications:
    get:
      summary: List user notifications
      description: Retrieve notifications for the authenticated user
      tags:
        - Notifications
      parameters:
        - name: status
          in: query
          description: Filter by notification status
          schema:
            type: string
            enum: [pending, delivered, failed]
        - name: type
          in: query
          description: Filter by notification type
          schema:
            type: string
            enum: [expiration, maintenance, reminder, custom]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        metadataSchema:
          $ref: '#/components/schemas/MetadataSchema'
        itemCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCollectionRequest:
      type: object
      required:
        - name
        - metadataSchema
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        metadataSchema:
          $ref: '#/components/schemas/MetadataSchema'

    UpdateCollectionRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        metadataSchema:
          $ref: '#/components/schemas/MetadataSchema'

    MetadataSchema:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MetadataFieldDefinition'
        requiredFields:
          type: array
          items:
            type: string

    MetadataFieldDefinition:
      type: object
      required:
        - type
        - required
      properties:
        type:
          type: string
          enum: [text, number, date, boolean]
        required:
          type: boolean
        description:
          type: string
          maxLength: 200
        validation:
          type: object
          description: Field-specific validation rules

    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 200
        collectionId:
          type: string
          format: uuid
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateItemRequest:
      type: object
      required:
        - name
        - metadata
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        metadata:
          type: object
          additionalProperties: true

    UpdateItemRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        metadata:
          type: object
          additionalProperties: true

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [expiration, maintenance, reminder, custom]
        message:
          type: string
        itemId:
          type: string
          format: uuid
        itemName:
          type: string
        scheduledFor:
          type: string
          format: date-time
        deliveredAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, delivered, failed]
        metadata:
          type: object
          additionalProperties: true

    PaginationInfo:
      type: object
      properties:
        total:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        hasMore:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
